pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Quelle branche Git d√©ployer ?')
        choice(name: 'DEPLOY_ENV', choices: ['Development', 'Staging', 'Production'], description: 'Choisir l‚Äôenvironnement de d√©ploiement')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Ex√©cuter les tests unitaires ?')
    }

    environment {
        GIT_REPO = 'git@github.com:tpdebenjamin/projet_devops.git'  // Remplace par ton lien
        ARTIFACTS_DIR = 'artifacts'  // R√©pertoire pour stocker les art√©facts
        SLACK_CHANNEL = '#devops'  // Change si besoin
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        echo "Clonage du repository ${params.BRANCH_NAME}"
                        git branch: params.BRANCH_NAME, url: env.GIT_REPO
                    } catch (Exception e) {
                        error "‚ùå Erreur lors du clonage du repo : ${e.message}"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    try {
                        echo 'üèóÔ∏è √âtape de build en cours...'
                        sh 'mkdir -p ${ARTIFACTS_DIR}'
                        sh './build.sh'  // Remplace par la vraie commande de build
                        archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                    } catch (Exception e) {
                        error "‚ùå √âchec du build : ${e.message}"
                    }
                }
            }
        }

        stage('Tests') {
            when {
                expression { params.RUN_TESTS }
            }
            steps {
                script {
                    try {
                        echo 'üß™ Ex√©cution des tests unitaires...'
                        sh './run_tests.sh'  // Remplace par ta commande de tests
                    } catch (Exception e) {
                        error "‚ùå √âchec des tests : ${e.message}"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    try {
                        def deployScript = ''
                        if (params.DEPLOY_ENV == 'Development') {
                            deployScript = 'deploy_dev.sh'
                        } else if (params.DEPLOY_ENV == 'Staging') {
                            deployScript = 'deploy_staging.sh'
                        } else if (params.DEPLOY_ENV == 'Production') {
                            deployScript = 'deploy_prod.sh'
                        }
                        echo "üöÄ D√©ploiement en cours pour ${params.DEPLOY_ENV}..."
                        sh "./scripts/${deployScript}"
                    } catch (Exception e) {
                        error "‚ùå √âchec du d√©ploiement : ${e.message}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üîÑ Pipeline termin√©.'
        }
        success {
            echo '‚úÖ Pipeline r√©ussi !'
            slackSend channel: env.SLACK_CHANNEL, message: "‚úÖ Pipeline r√©ussi sur ${params.BRANCH_NAME} -> ${params.DEPLOY_ENV}"
        }
        failure {
            echo '‚ùå Le pipeline a √©chou√©.'
            slackSend channel: env.SLACK_CHANNEL, message: "‚ùå √âchec du pipeline sur ${params.BRANCH_NAME}"
        }
    }
}
